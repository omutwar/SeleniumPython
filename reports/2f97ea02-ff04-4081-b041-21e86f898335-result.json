{"name": "test_login", "status": "broken", "statusDetails": {"message": "Exception: Cannot quit the default/initial driver!\nThis is done automatically at the end of each test.\nUse this method only if get_new_driver() has been called.", "trace": "self = <tests.selenium_tests.openhrm_test.OpenHRMTest testMethod=test_login>\n\n    def test_login(self):\n        self.goto(OpenHRMTest.openHRM_url)\n        self.fill(\"//input[@placeholder='Username']\", \"Admin\")\n        self.fill(\"//input[@placeholder='Password']\", \"admin123\")\n        self.click(\"//button[@type='submit']\")\n        self.assert_text_visible(\"Dashboard\", \"//h6[@class='oxd-text oxd-text--h6 oxd-topbar-header-breadcrumb-module']\")\n>       self.quit_extra_driver()\n\ntests\\selenium_tests\\openhrm_test.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.selenium_tests.openhrm_test.OpenHRMTest testMethod=test_login>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"41f1f20c7a8b674f116fcdd87923e6cf\")>\n\n    def quit_extra_driver(self, driver=None):\n        \"\"\"Quits the driver only if it's not the default/initial driver.\n        If a driver is given, quits that, otherwise quits the active driver.\n        Raises an Exception if quitting the default/initial driver.\n        Should only be called if a test has already called get_new_driver().\n        Afterwards, self.driver points to the default/initial driver\n        if self.driver was the one being quit.\n        ----\n        If a test never calls get_new_driver(), this method isn't needed.\n        SeleniumBase automatically quits browsers after tests have ended.\n        Even if tests do call get_new_driver(), you don't need to use this\n        method unless you want to quit extra browsers before a test ends.\n        ----\n        Terminology and important details:\n        * Active driver: The one self.driver is set to. Used within methods.\n        * Default/initial driver: The one that is spun up when tests start.\n        Initially, the active driver and the default driver are the same.\n        The active driver can change when one of these methods is called:\n        > self.get_new_driver()\n        > self.switch_to_default_driver()\n        > self.switch_to_driver()\n        > self.quit_extra_driver() \"\"\"\n        self.__check_scope()\n        if not driver:\n            driver = self.driver\n        if type(driver).__name__ == \"NoneType\":\n            raise Exception(\"The driver to quit was a NoneType variable!\")\n        elif (\n            not hasattr(driver, \"get\")\n            or not hasattr(driver, \"name\")\n            or not hasattr(driver, \"quit\")\n            or not hasattr(driver, \"capabilities\")\n            or not hasattr(driver, \"window_handles\")\n        ):\n            raise Exception(\"The driver to quit does not match a Driver!\")\n        elif self._reuse_session and driver == self._default_driver:\n            raise Exception(\n                \"Cannot quit the initial driver in --reuse-session mode!\\n\"\n                \"This is done automatically after all tests have ended.\\n\"\n                \"Use this method only if get_new_driver() has been called.\"\n            )\n        elif (\n            driver == self._default_driver\n            or (driver in self._drivers_list and len(self._drivers_list) == 1)\n        ):\n>           raise Exception(\n                \"Cannot quit the default/initial driver!\\n\"\n                \"This is done automatically at the end of each test.\\n\"\n                \"Use this method only if get_new_driver() has been called.\"\n            )\nE           Exception: Cannot quit the default/initial driver!\nE           This is done automatically at the end of each test.\nE           Use this method only if get_new_driver() has been called.\n\nseleniumvenv\\Lib\\site-packages\\seleniumbase\\fixtures\\base_case.py:10016: Exception"}, "start": 1702698085998, "stop": 1702698101762, "uuid": "10eaf766-4ac6-43c5-ac17-c60569c6cf7a", "historyId": "509b1e2f89f10726f4fe0dc4da5e9d66", "testCaseId": "509b1e2f89f10726f4fe0dc4da5e9d66", "fullName": "tests.selenium_tests.openhrm_test.OpenHRMTest#test_login", "labels": [{"name": "parentSuite", "value": "tests.selenium_tests"}, {"name": "suite", "value": "openhrm_test"}, {"name": "subSuite", "value": "OpenHRMTest"}, {"name": "host", "value": "Bughra"}, {"name": "thread", "value": "15296-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.selenium_tests.openhrm_test"}]}